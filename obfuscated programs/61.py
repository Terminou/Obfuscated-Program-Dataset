def matrix_product (O0O00O0OO00O0OOO0 ):	
    ""	
    O0OO0OOOO0O0O0OOO =len (O0O00O0OO00O0OOO0 )	
    O0O0O0O0000O00OO0 =[[-1 ]*O0OO0OOOO0O0O0OOO for _O00O0000000O0O00O in range (O0OO0OOOO0O0O0OOO )]	
    OO00O00000OO00O0O =[[-1 ]*O0OO0OOOO0O0O0OOO for _O0O00O00OOO0OO000 in range (O0OO0OOOO0O0O0OOO )]	
    for OO00OO0OOO00O000O in range (1 ,O0OO0OOOO0O0O0OOO ):	
        O0O0O0O0000O00OO0 [OO00OO0OOO00O000O ][OO00OO0OOO00O000O ]=0 	
    for O0O00O0000O000OO0 in range (2 ,O0OO0OOOO0O0O0OOO ):	
        for OOOOO0O0OOO0000O0 in range (1 ,O0OO0OOOO0O0O0OOO -O0O00O0000O000OO0 +1 ):	
            O000O00OOO00O000O =OOOOO0O0OOO0000O0 +O0O00O0000O000OO0 -1 	
            OO000OOOO0OOO0000 =float ('inf')	
            for OO0OOOO0OOO00O0O0 in range (OOOOO0O0OOO0000O0 ,O000O00OOO00O000O ):	
                O00OO0O00O0OO0O00 =O0O0O0O0000O00OO0 [OOOOO0O0OOO0000O0 ][OO0OOOO0OOO00O0O0 ]+O0O0O0O0000O00OO0 [OO0OOOO0OOO00O0O0 +1 ][O000O00OOO00O000O ]+O0O00O0OO00O0OOO0 [OOOOO0O0OOO0000O0 -1 ]*O0O00O0OO00O0OOO0 [OO0OOOO0OOO00O0O0 ]*O0O00O0OO00O0OOO0 [O000O00OOO00O000O ]	
                if O00OO0O00O0OO0O00 <OO000OOOO0OOO0000 :	
                    OO000OOOO0OOO0000 =O00OO0O00O0OO0O00 	
                    OO00O00000OO00O0O [OOOOO0O0OOO0000O0 ][O000O00OOO00O000O ]=OO0OOOO0OOO00O0O0 	
            O0O0O0O0000O00OO0 [OOOOO0O0OOO0000O0 ][O000O00OOO00O000O ]=OO000OOOO0OOO0000 	
    return O0O0O0O0000O00OO0 ,OO00O00000OO00O0O 	
def print_parenthesization (O0OO00O0OOO00000O ,OO000O00000O000OO ,OOO0OO000OO000O00 ):	
    ""	
    if OO000O00000O000OO ==OOO0OO000OO000O00 :	
        print ('A[{}]'.format (OO000O00000O000OO ),end ='')	
        return 	
    OOOO0O000OO0O00O0 =O0OO00O0OOO00000O [OO000O00000O000OO ][OOO0OO000OO000O00 ]	
    print ('(',end ='')	
    print_parenthesization (O0OO00O0OOO00000O ,OO000O00000O000OO ,OOOO0O000OO0O00O0 )	
    print_parenthesization (O0OO00O0OOO00000O ,OOOO0O000OO0O00O0 +1 ,OOO0OO000OO000O00 )	
    print (')',end ='')	
n =int (input ('Enter number of matrices: '))	
p =[]	
for i in range (n ):	
    temp =int (input ('Enter number of rows in matrix {}: '.format (i +1 )))	
    p .append (temp )	
temp =int (input ('Enter number of columns in matrix {}: '.format (n )))	
p .append (temp )	
m ,s =matrix_product (p )	
print ('The number of scalar multiplications needed:',m [1 ][n ])	
print ('Optimal parenthesization: ',end ='')	
print_parenthesization (s ,1 ,n )
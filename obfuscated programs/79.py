from functools import cmp_to_key 
class Point :
    def __init__ (O0OOOOO0OO00000OO ,x =None ,y =None ):
        O0OOOOO0OO00000OO .x =x 
        O0OOOOO0OO00000OO .y =y 
p0 =Point (0 ,0 )
def nextToTop (OO0OOO0OOO0O0O0OO ):
    return OO0OOO0OOO0O0O0OO [-2 ]
def distSq (OO00OOO000O00OO00 ,OO00000OOO0OO00O0 ):
    return ((OO00OOO000O00OO00 .x -OO00000OOO0OO00O0 .x )*(OO00OOO000O00OO00 .x -OO00000OOO0OO00O0 .x )+(OO00OOO000O00OO00 .y -OO00000OOO0OO00O0 .y )*(OO00OOO000O00OO00 .y -OO00000OOO0OO00O0 .y ))
def orientation (OOOO000000O0O0OOO ,OO00O000OO0OOO00O ,OO000OO0000OOO0OO ):
    OO0O00OOOOOO000OO =((OO00O000OO0OOO00O .y -OOOO000000O0O0OOO .y )*(OO000OO0000OOO0OO .x -OO00O000OO0OOO00O .x )-(OO00O000OO0OOO00O .x -OOOO000000O0O0OOO .x )*(OO000OO0000OOO0OO .y -OO00O000OO0OOO00O .y ))
    if OO0O00OOOOOO000OO ==0 :
        return 0 
    elif OO0O00OOOOOO000OO >0 :
        return 1 
    else :
        return 2 
def compare (OOOOO00O0OOOO0000 ,O00OOOO0000O0OOOO ):
    O0O0000O00O0OOO00 =orientation (p0 ,OOOOO00O0OOOO0000 ,O00OOOO0000O0OOOO )
    if O0O0000O00O0OOO00 ==0 :
        if distSq (p0 ,O00OOOO0000O0OOOO )>=distSq (p0 ,OOOOO00O0OOOO0000 ):
            return -1 
        else :
            return 1 
    else :
        if O0O0000O00O0OOO00 ==2 :
            return -1 
        else :
            return 1 
def convexHull (OOOO000O0O0OO00OO ,OO00000OO0000OO00 ):
    O0000O00OOO0OOOO0 =OOOO000O0O0OO00OO [0 ].y 
    OO00OO0OO0OOOO0O0 =0 
    for O0OO0OO0O000OOOOO in range (1 ,OO00000OO0000OO00 ):
        O000OOOO0000O000O =OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO ].y 
        if ((O000OOOO0000O000O <O0000O00OOO0OOOO0 )or (O0000O00OOO0OOOO0 ==O000OOOO0000O000O and OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO ].x <OOOO000O0O0OO00OO [OO00OO0OO0OOOO0O0 ].x )):
            O0000O00OOO0OOOO0 =OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO ].y 
            OO00OO0OO0OOOO0O0 =O0OO0OO0O000OOOOO 
    OOOO000O0O0OO00OO [0 ],OOOO000O0O0OO00OO [OO00OO0OO0OOOO0O0 ]=OOOO000O0O0OO00OO [OO00OO0OO0OOOO0O0 ],OOOO000O0O0OO00OO [0 ]
    OOO0O00O000O0O00O =OOOO000O0O0OO00OO [0 ]
    OOOO000O0O0OO00OO =sorted (OOOO000O0O0OO00OO ,key =cmp_to_key (compare ))
    O0O0000OO00O0O0O0 =1 
    for O0OO0OO0O000OOOOO in range (1 ,OO00000OO0000OO00 ):
        while ((O0OO0OO0O000OOOOO <OO00000OO0000OO00 -1 )and (orientation (OOO0O00O000O0O00O ,OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO ],OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO +1 ])==0 )):
            O0OO0OO0O000OOOOO +=1 
        OOOO000O0O0OO00OO [O0O0000OO00O0O0O0 ]=OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO ]
        O0O0000OO00O0O0O0 +=1 
    if O0O0000OO00O0O0O0 <3 :
        return 
    OOOOO00O0OO00O000 =[]
    OOOOO00O0OO00O000 .append (OOOO000O0O0OO00OO [0 ])
    OOOOO00O0OO00O000 .append (OOOO000O0O0OO00OO [1 ])
    OOOOO00O0OO00O000 .append (OOOO000O0O0OO00OO [2 ])
    for O0OO0OO0O000OOOOO in range (3 ,O0O0000OO00O0O0O0 ):
        while ((len (OOOOO00O0OO00O000 )>1 )and (orientation (nextToTop (OOOOO00O0OO00O000 ),OOOOO00O0OO00O000 [-1 ],OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO ])!=2 )):
            OOOOO00O0OO00O000 .pop ()
        OOOOO00O0OO00O000 .append (OOOO000O0O0OO00OO [O0OO0OO0O000OOOOO ])
    while OOOOO00O0OO00O000 :
        O0OO0OOO0O0OO0O0O =OOOOO00O0OO00O000 [-1 ]
        print ("("+str (O0OO0OOO0O0OO0O0O .x )+", "+str (O0OO0OOO0O0OO0O0O .y )+")")
        OOOOO00O0OO00O000 .pop ()
input_points =[(0 ,3 ),(1 ,1 ),(2 ,2 ),(4 ,4 ),(0 ,0 ),(1 ,2 ),(3 ,1 ),(3 ,3 )]
points =[]
for point in input_points :
    points .append (Point (point [0 ],point [1 ]))
n =len (points )
convexHull (points ,n )
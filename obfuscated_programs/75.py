import random 
import math 
def modular_pow (O0O00OOOO0OO00OOO ,OOO00000OO00OO00O ,O0OO00OO0O0OO0OO0 ):
    O00O0OO000OO00OOO =1 
    while (OOO00000OO00OO00O >0 ):
        if (OOO00000OO00OO00O &1 ):
            O00O0OO000OO00OOO =(O00O0OO000OO00OOO *O0O00OOOO0OO00OOO )%O0OO00OO0O0OO0OO0 
        OOO00000OO00OO00O =OOO00000OO00OO00O >>1 
        O0O00OOOO0OO00OOO =(O0O00OOOO0OO00OOO *O0O00OOOO0OO00OOO )%O0OO00OO0O0OO0OO0 
    return O00O0OO000OO00OOO 
def PollardRho (O0OO00OOOOO000O00 ):
    if (O0OO00OOOOO000O00 ==1 ):
        return O0OO00OOOOO000O00 
    if (O0OO00OOOOO000O00 %2 ==0 ):
        return 2 
    OOO00OOO0O0O00000 =(random .randint (0 ,2 )%(O0OO00OOOOO000O00 -2 ))
    O00OO00O0O00O0000 =OOO00OOO0O0O00000 
    O00OO00O00OO0O0O0 =(random .randint (0 ,1 )%(O0OO00OOOOO000O00 -1 ))
    OOOO0OOOOO0000O0O =1 
    while (OOOO0OOOOO0000O0O ==1 ):
        OOO00OOO0O0O00000 =(modular_pow (OOO00OOO0O0O00000 ,2 ,O0OO00OOOOO000O00 )+O00OO00O00OO0O0O0 +O0OO00OOOOO000O00 )%O0OO00OOOOO000O00 
        O00OO00O0O00O0000 =(modular_pow (O00OO00O0O00O0000 ,2 ,O0OO00OOOOO000O00 )+O00OO00O00OO0O0O0 +O0OO00OOOOO000O00 )%O0OO00OOOOO000O00 
        O00OO00O0O00O0000 =(modular_pow (O00OO00O0O00O0000 ,2 ,O0OO00OOOOO000O00 )+O00OO00O00OO0O0O0 +O0OO00OOOOO000O00 )%O0OO00OOOOO000O00 
        OOOO0OOOOO0000O0O =math .gcd (abs (OOO00OOO0O0O00000 -O00OO00O0O00O0000 ),O0OO00OOOOO000O00 )
        if (OOOO0OOOOO0000O0O ==O0OO00OOOOO000O00 ):
            return PollardRho (O0OO00OOOOO000O00 )
    return OOOO0OOOOO0000O0O 
if __name__ =="__main__":
    n =10967535067 
    print ("One of the divisors for",n ,"is ",PollardRho (n ))
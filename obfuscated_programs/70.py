from typing import List 
import bisect 
X =[0 ]*2000005 
Y =[0 ]*2000005 
def calcsubarray (O000OOOOOOOO0OO0O :List [int ],OOO0O00O000O0000O :List [int ],O0000O00O0O000OO0 :int ,O00000OOO0OOOO0O0 :int )->None :
    for O0000O0O000OOO0O0 in range ((1 <<O0000O00O0O000OO0 )):
        O0OO00OO0O00000O0 =0 
        for OOOOO0O00OOOO0OO0 in range (O0000O00O0O000OO0 ):
            if (O0000O0O000OOO0O0 &(1 <<OOOOO0O00OOOO0OO0 )):
                O0OO00OO0O00000O0 +=O000OOOOOOOO0OO0O [OOOOO0O00OOOO0OO0 +O00000OOO0OOOO0O0 ]
        OOO0O00O000O0000O [O0000O0O000OOO0O0 ]=O0OO00OO0O00000O0 
def solveSubsetSum (O0O0OOOOO0OO0O0OO :List [int ],O0OO0OO0000OOOOO0 :int ,OOOO00000OO0O000O :int )->int :
    global Y 
    calcsubarray (O0O0OOOOO0OO0O0OO ,X ,O0OO0OO0000OOOOO0 //2 ,0 )
    calcsubarray (O0O0OOOOO0OO0O0OO ,Y ,O0OO0OO0000OOOOO0 -O0OO0OO0000OOOOO0 //2 ,O0OO0OO0000OOOOO0 //2 )
    OOO000OO0000000O0 =1 <<(O0OO0OO0000OOOOO0 //2 )
    O0O00OO0O0OOOO0OO =1 <<(O0OO0OO0000OOOOO0 -O0OO0OO0000OOOOO0 //2 )
    O00OO00OOO0O0O0O0 =Y [:O0O00OO0O0OOOO0OO ]
    O00OO00OOO0O0O0O0 .sort ()
    Y =O00OO00OOO0O0O0O0 
    OOO0OOOO00000O0O0 =0 
    for O0OO0O0OO00OOOO00 in range (OOO000OO0000000O0 ):
        if (X [O0OO0O0OO00OOOO00 ]<=OOOO00000OO0O000O ):
            OO00000OOOOOOO00O =bisect .bisect_left (Y ,OOOO00000OO0O000O -X [O0OO0O0OO00OOOO00 ])
            if (OO00000OOOOOOO00O ==O0O00OO0O0OOOO0OO or (OO00000OOOOOOO00O <O0O00OO0O0OOOO0OO and Y [OO00000OOOOOOO00O ]!=(OOOO00000OO0O000O -X [O0OO0O0OO00OOOO00 ]))):
                OO00000OOOOOOO00O -=1 
            if ((Y [OO00000OOOOOOO00O ]+X [O0OO0O0OO00OOOO00 ])>OOO0OOOO00000O0O0 ):
                OOO0OOOO00000O0O0 =Y [OO00000OOOOOOO00O ]+X [O0OO0O0OO00OOOO00 ]
    return OOO0OOOO00000O0O0 
if __name__ =="__main__":
    a =[3 ,34 ,4 ,12 ,5 ,2 ]
    n =len (a )
    S =10 
    print ("Largest value smaller than or equal to given sum is {}".format (solveSubsetSum (a ,n ,S )))
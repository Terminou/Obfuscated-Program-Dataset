from collections import defaultdict 	
class Graph :	
    def __init__ (OO0000O00OO0OOO00 ,O00O00O0OOOOOO0OO ):	
        OO0000O00OO0OOO00 .V =O00O00O0OOOOOO0OO 	
        OO0000O00OO0OOO00 .graph =[]	
    def addEdge (O0O0O0OO0O00OO0OO ,O0OOO00OOOO00OO00 ,OO000OOO00OO0O0OO ,OOOO0OOOO0OOOOOOO ):	
        O0O0O0OO0O00OO0OO .graph .append ([O0OOO00OOOO00OO00 ,OO000OOO00OO0O0OO ,OOOO0OOOO0OOOOOOO ])	
    def find (O0000O0000OO000OO ,OO000O0OO00000000 ,OO00OOO0O0000O000 ):	
        if OO000O0OO00000000 [OO00OOO0O0000O000 ]==OO00OOO0O0000O000 :	
            return OO00OOO0O0000O000 	
        return O0000O0000OO000OO .find (OO000O0OO00000000 ,OO000O0OO00000000 [OO00OOO0O0000O000 ])	
    def union (O0O00000OOOO0OO0O ,O00000O00O0O0O00O ,OO0OO0O00O0000OOO ,OO0OO0O0OOOOO0O0O ,O0OO0OOO000OO0O0O ):	
        OOO00OOOO000000OO =O0O00000OOOO0OO0O .find (O00000O00O0O0O00O ,OO0OO0O0OOOOO0O0O )	
        O000000OO0O0O0000 =O0O00000OOOO0OO0O .find (O00000O00O0O0O00O ,O0OO0OOO000OO0O0O )	
        if OO0OO0O00O0000OOO [OOO00OOOO000000OO ]<OO0OO0O00O0000OOO [O000000OO0O0O0000 ]:	
            O00000O00O0O0O00O [OOO00OOOO000000OO ]=O000000OO0O0O0000 	
        elif OO0OO0O00O0000OOO [OOO00OOOO000000OO ]>OO0OO0O00O0000OOO [O000000OO0O0O0000 ]:	
            O00000O00O0O0O00O [O000000OO0O0O0000 ]=OOO00OOOO000000OO 	
        else :	
            O00000O00O0O0O00O [O000000OO0O0O0000 ]=OOO00OOOO000000OO 	
            OO0OO0O00O0000OOO [OOO00OOOO000000OO ]+=1 	
    def KruskalMST (OO0O00OO00O000O0O ):	
        O0OO0O00OO000O00O =[]	
        OOOOOOOOOOOO00O0O =0 	
        O00OOO000OO0O0OOO =0 	
        OO0O00OO00O000O0O .graph =sorted (OO0O00OO00O000O0O .graph ,key =lambda O0O0O0O0O000OOOOO :O0O0O0O0O000OOOOO [2 ])	
        O0O0O0OOOO00O0O00 =[]	
        OO00OO000OO0OO00O =[]	
        for O0OOOO0O0OO00O0OO in range (OO0O00OO00O000O0O .V ):	
            O0O0O0OOOO00O0O00 .append (O0OOOO0O0OO00O0OO )	
            OO00OO000OO0OO00O .append (0 )	
        while O00OOO000OO0O0OOO <OO0O00OO00O000O0O .V -1 :	
            O000OOO0OOOO0O0O0 ,OOOOO00OOOOO0O0OO ,O00O00OOOO00O0O0O =OO0O00OO00O000O0O .graph [OOOOOOOOOOOO00O0O ]	
            OOOOOOOOOOOO00O0O =OOOOOOOOOOOO00O0O +1 	
            O0OO0OO0O00O0O0OO =OO0O00OO00O000O0O .find (O0O0O0OOOO00O0O00 ,O000OOO0OOOO0O0O0 )	
            OOO00OO0O00O00000 =OO0O00OO00O000O0O .find (O0O0O0OOOO00O0O00 ,OOOOO00OOOOO0O0OO )	
            if O0OO0OO0O00O0O0OO !=OOO00OO0O00O00000 :	
                O00OOO000OO0O0OOO =O00OOO000OO0O0OOO +1 	
                O0OO0O00OO000O00O .append ([O000OOO0OOOO0O0O0 ,OOOOO00OOOOO0O0OO ,O00O00OOOO00O0O0O ])	
                OO0O00OO00O000O0O .union (O0O0O0OOOO00O0O00 ,OO00OO000OO0OO00O ,O0OO0OO0O00O0O0OO ,OOO00OO0O00O00000 )	
        OOO0O0OOO00OOO000 =0 	
        print ("Edges in the constructed MST")	
        for O000OOO0OOOO0O0O0 ,OOOOO00OOOOO0O0OO ,OO0000OOOOOOO0000 in O0OO0O00OO000O00O :	
            OOO0O0OOO00OOO000 +=OO0000OOOOOOO0000 	
            print ("%d -- %d == %d"%(O000OOO0OOOO0O0O0 ,OOOOO00OOOOO0O0OO ,OO0000OOOOOOO0000 ))	
        print ("Minimum Spanning Tree",OOO0O0OOO00OOO000 )	
g =Graph (4 )	
g .addEdge (0 ,1 ,10 )	
g .addEdge (0 ,2 ,6 )	
g .addEdge (0 ,3 ,5 )	
g .addEdge (1 ,3 ,15 )	
g .addEdge (2 ,3 ,4 )	
g .KruskalMST ()
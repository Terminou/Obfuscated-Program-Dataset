__all__ =[]	
class O0OOO0OO0OOOOOO00 :	
    def __init__ (OO0OO0O00O000000O ,O0OO00OO0O0000O0O ):	
        OO0OO0O00O000000O .candidate =O0OO00OO0O0000O0O 	
class O0OOOOO0O000OO000 :	
    def __init__ (OOOO0OO0OOO0O0000 ,OO0O00O0O0O0O0O00 ):	
        OOOO0OO0OOO0O0000 .constraint =OO0O00O0O0O0O0O00 	
class O00OO0O0OO000OO00 (object ):	
    def __init__ (O00OOO0O0OO00OO00 ,O0OO0000OOO00OOOO ,OO0OOO0O0OO00000O ,OO0000O0000O00O00 ,O0OOO000O0O0000O0 ):	
        O00OOO0O0OO00OO00 .__OOOO0000OO000OO0O =O0OO0000OOO00OOOO 	
        O00OOO0O0OO00OO00 .__O00OOO000000O00OO =OO0OOO0O0OO00000O 	
        O00OOO0O0OO00OO00 .__OOOO0O00000O00000 =OO0000O0000O00O00 	
        O00OOO0O0OO00OO00 .__O000OOOOO00OOOOO0 =O0OOO000O0O0000O0 	
        O00OOO0O0OO00OO00 .__OOO00O0OO0O00OOO0 =None 	
        O00OOO0O0OO00OO00 .__O0O0O0OO0OO000O00 =[]	
        O00OOO0O0OO00OO00 .__OO0O00OOOOO00O000 =[]	
    def build_links (O0OOOO00O00OO0OOO ):	
        O0OOOO00O00OO0OOO .__OOO00O0OO0O00OOO0 =O0OOOOO0O000OO000 (None )	
        O000000OO0OO0O00O =O0OOOO00O00OO0OOO .__OOO00O0OO0O00OOO0 	
        for O0OO00OO000O00O0O in O0OOOO00O00OO0OOO .__O00OOO000000O00OO :	
            O0O00OO000OO00O0O =O0OOOOO0O000OO000 (O0OO00OO000O00O0O )	
            O000000OO0OO0O00O .next =O0O00OO000OO00O0O 	
            O0O00OO000OO00O0O .prev =O000000OO0OO0O00O 	
            O0O00OO000OO00O0O .up =O0O00OO000OO00O0O 	
            O0O00OO000OO00O0O .down =O0O00OO000OO00O0O 	
            O000000OO0OO0O00O =O0O00OO000OO00O0O 	
        O000000OO0OO0O00O .next =O0OOOO00O00OO0OOO .__OOO00O0OO0O00OOO0 	
        O0OOOO00O00OO0OOO .__OOO00O0OO0O00OOO0 .prev =O000000OO0OO0O00O 	
        for OO00OO0OOOOO0OOOO ,OO00O0O00OO0O0OOO in enumerate (O0OOOO00O00OO0OOO .__OOOO0000OO000OO0O ):	
            OOOO0O00OO00O0OOO =None 	
            O00000O00OOO0O0O0 =None 	
            O000000OO0OO0O00O =O0OOOO00O00OO0OOO .__OOO00O0OO0O00OOO0 .next 	
            while O000000OO0OO0O00O !=O0OOOO00O00OO0OOO .__OOO00O0OO0O00OOO0 :	
                if O0OOOO00O00OO0OOO .__O000OOOOO00OOOOO0 (OO00O0O00OO0O0OOO ,O000000OO0OO0O00O .constraint ):	
                    O0OOOOOOOO0OO00OO =O0OOO0OO0OOOOOO00 (OO00OO0OOOOO0OOOO )	
                    if not OOOO0O00OO00O0OOO :	
                        OOOO0O00OO00O0OOO =O00000O00OOO0O0O0 =O0OOOOOOOO0OO00OO 	
                    else :	
                        O00000O00OOO0O0O0 .next =O0OOOOOOOO0OO00OO 	
                        O0OOOOOOOO0OO00OO .prev =O00000O00OOO0O0O0 	
                        O00000O00OOO0O0O0 =O0OOOOOOOO0OO00OO 	
                    O00OO0O00OOOO00O0 =O000000OO0OO0O00O .up 	
                    O000000OO0OO0O00O .up =O0OOOOOOOO0OO00OO 	
                    O0OOOOOOOO0OO00OO .down =O000000OO0OO0O00O 	
                    O0OOOOOOOO0OO00OO .up =O00OO0O00OOOO00O0 	
                    O00OO0O00OOOO00O0 .down =O0OOOOOOOO0OO00OO 	
                O000000OO0OO0O00O =O000000OO0OO0O00O .next 	
            if O00000O00OOO0O0O0 :	
                O00000O00OOO0O0O0 .next =OOOO0O00OO00O0OOO 	
                OOOO0O00OO00O0OOO .prev =O00000O00OOO0O0O0 	
    def algorithm_x (OO0OO000OOO0O0000 ):	
        O000OO0OO00O000OO =(OO0OO000OOO0O0000 .__OOO00O0OO0O00OOO0 .next ==OO0OO000OOO0O0000 .__OOO00O0OO0O00OOO0 )	
        if not O000OO0OO00O000OO :	
            OOOO0OO00O0000OOO =True 	
            O0OOOOO0000OO00OO =OO0OO000OOO0O0000 .__OOO00O0OO0O00OOO0 .next 	
            while O0OOOOO0000OO00OO !=OO0OO000OOO0O0000 .__OOO00O0OO0O00OOO0 :	
                if O0OOOOO0000OO00OO .constraint not in OO0OO000OOO0O0000 .__OOOO0O00000O00000 or O0OOOOO0000OO00OO .down !=O0OOOOO0000OO00OO :	
                    OOOO0OO00O0000OOO =False 	
                    break 	
                O0OOOOO0000OO00OO =O0OOOOO0000OO00OO .next 	
        if O000OO0OO00O000OO or OOOO0OO00O0000OOO :	
            O0OO000OO000O000O =sorted (OO0OO000OOO0O0000 .__OO0O00OOOOO00O000 )	
            if O0OO000OO000O000O not in OO0OO000OOO0O0000 .__O0O0O0OO0OO000O00 :	
                OO0OO000OOO0O0000 .__O0O0O0OO0OO000O00 .append (O0OO000OO000O000O )	
        else :	
            O0OOOOO0000OO00OO =OO0OO000OOO0O0000 .__OOO00O0OO0O00OOO0 .next 	
            if O0OOOOO0000OO00OO .down ==O0OOOOO0000OO00OO :	
                if O0OOOOO0000OO00OO .constraint in OO0OO000OOO0O0000 .__OOOO0O00000O00000 :	
                    O0OOOOO0000OO00OO =O0OOOOO0000OO00OO .next 	
                else :	
                    return 	
            O0O0OOOOOO0OOOO0O =O0OOOOO0000OO00OO .down 	
            while O0O0OOOOOO0OOOO0O !=O0OOOOO0000OO00OO :	
                OO0OO000OOO0O0000 .__OO0O00OOOOO00O000 .append (O0O0OOOOOO0OOOO0O .candidate )	
                OO0OO000OOO0O0000 .__OO0000O000O0OOO00 (O0O0OOOOOO0OOOO0O )	
                OO0OO000OOO0O0000 .algorithm_x ()	
                OO0OO000OOO0O0000 .__O00O0000OO0000OO0 (O0O0OOOOOO0OOOO0O )	
                OO0OO000OOO0O0000 .__OO0O00OOOOO00O000 .pop ()	
                O0O0OOOOOO0OOOO0O =O0O0OOOOOO0OOOO0O .down 	
    def __OO0000O000O0OOO00 (O0OO0OOOO0O0OO0O0 ,OO000O000O0O0O0OO ):	
        OOO0O0000O00OOO0O =OO000O000O0O0O0OO 	
        O0OO0OOOO0O0OO0O0 .__O0O00O0000O00O000 (OO000O000O0O0O0OO )	
        OO000O000O0O0O0OO =OO000O000O0O0O0OO .next 	
        while OO000O000O0O0O0OO !=OOO0O0000O00OOO0O :	
            O0OO0OOOO0O0OO0O0 .__O0O00O0000O00O000 (OO000O000O0O0O0OO )	
            OO000O000O0O0O0OO =OO000O000O0O0O0OO .next 	
    def __O00O0000OO0000OO0 (O00O0OO0O00OOO0O0 ,O0OOOOOO0OO00OOO0 ):	
        O0O0OO000000OO0OO =O0OOOOOO0OO00OOO0 	
        O0OOOOOO0OO00OOO0 =O0OOOOOO0OO00OOO0 .prev 	
        while O0OOOOOO0OO00OOO0 !=O0O0OO000000OO0OO :	
            O00O0OO0O00OOO0O0 .__O0O0OO0OO0OOOOO00 (O0OOOOOO0OO00OOO0 )	
            O0OOOOOO0OO00OOO0 =O0OOOOOO0OO00OOO0 .prev 	
        O00O0OO0O00OOO0O0 .__O0O0OO0OO0OOOOO00 (O0OOOOOO0OO00OOO0 )	
    def __O0O00O0000O00O000 (OO0OO0OO000O0O0OO ,OOOO0OOOOO0OO0OOO ):	
        while not isinstance (OOOO0OOOOO0OO0OOO ,O0OOOOO0O000OO000 ):	
            OOOO0OOOOO0OO0OOO =OOOO0OOOOO0OO0OOO .up 	
        OOOO0OOOOO0OO0OOO .next .prev =OOOO0OOOOO0OO0OOO .prev 	
        OOOO0OOOOO0OO0OOO .prev .next =OOOO0OOOOO0OO0OOO .next 	
        OO0O000O0OO00000O =OOOO0OOOOO0OO0OOO 	
        OOOO0OOOOO0OO0OOO =OOOO0OOOOO0OO0OOO .down 	
        while OOOO0OOOOO0OO0OOO !=OO0O000O0OO00000O :	
            O000O000OO00O0O0O =OOOO0OOOOO0OO0OOO 	
            OOO000O0000OO00O0 =OOOO0OOOOO0OO0OOO .next 	
            while OOO000O0000OO00O0 !=O000O000OO00O0O0O :	
                OOO000O0000OO00O0 .up .down =OOO000O0000OO00O0 .down 	
                OOO000O0000OO00O0 .down .up =OOO000O0000OO00O0 .up 	
                OOO000O0000OO00O0 =OOO000O0000OO00O0 .next 	
            OOOO0OOOOO0OO0OOO =OOOO0OOOOO0OO0OOO .down 	
    def __O0O0OO0OO0OOOOO00 (OO0O0OOOO0OO0OO0O ,OO0OOOO00OO0O00O0 ):	
        while not isinstance (OO0OOOO00OO0O00O0 ,O0OOOOO0O000OO000 ):	
            OO0OOOO00OO0O00O0 =OO0OOOO00OO0O00O0 .up 	
        OO0OOOO00OO0O00O0 .prev .next =OO0OOOO00OO0O00O0 	
        OO0OOOO00OO0O00O0 .next .prev =OO0OOOO00OO0O00O0 	
        OO0O00OO0OOOOOOO0 =OO0OOOO00OO0O00O0 	
        OO0OOOO00OO0O00O0 =OO0OOOO00OO0O00O0 .up 	
        while OO0OOOO00OO0O00O0 !=OO0O00OO0OOOOOOO0 :	
            O0O0O0000O0O00O00 =OO0OOOO00OO0O00O0 	
            OOO000OOOO000OO00 =OO0OOOO00OO0O00O0 .next 	
            while OOO000OOOO000OO00 !=O0O0O0000O0O00O00 :	
                OOO000OOOO000OO00 .up .down =OOO000OOOO000OO00 	
                OOO000OOOO000OO00 .down .up =OOO000OOOO000OO00 	
                OOO000OOOO000OO00 =OOO000OOOO000OO00 .next 	
            OO0OOOO00OO0O00O0 =OO0OOOO00OO0O00O0 .up 	
    def get_results (OOOOO0OO0OOOOOO00 ):	
        return [[OOOOO0OO0OOOOOO00 .__OOOO0000OO000OO0O [OOOOOOO00OO00O0O0 ]for OOOOOOO00OO00O0O0 in O0OOOO0OOOOOOOOOO ]for O0OOOO0OOOOOOOOOO in OOOOO0OO0OOOOOO00 .__O0O0O0OO0OO000O00 ]	
def OO00000OOO0OOO0OO (OO00OO0O000000000 ):	
    OOOO0O00O0OO0OOO0 =[(OO0OOOO0OOOO00O0O ,OO0O00OOO00OO0O0O )for OO0OOOO0OOOO00O0O in range (OO00OO0O000000000 )for OO0O00OOO00OO0O0O in range (OO00OO0O000000000 )]	
    OOO00O0OOOOOO00O0 =[]	
    OOO0O0O0OO0OOOO00 =[]	
    for O00O000OOOO0O0OO0 in range (OO00OO0O000000000 ):	
        OOO00O0OOOOOO00O0 .append (('row',O00O000OOOO0O0OO0 ))	
    for O00O000OOOO0O0OO0 in range (OO00OO0O000000000 ):	
        OOO00O0OOOOOO00O0 .append (('col',O00O000OOOO0O0OO0 ))	
    for O00O000OOOO0O0OO0 in range (OO00OO0O000000000 *2 -1 ):	
        OOO00O0OOOOOO00O0 .append (('diag',O00O000OOOO0O0OO0 ))	
        OOO0O0O0OO0OOOO00 .append (('diag',O00O000OOOO0O0OO0 ))	
    for O00O000OOOO0O0OO0 in range (OO00OO0O000000000 *2 -1 ):	
        OOO00O0OOOOOO00O0 .append (('rdiag',O00O000OOOO0O0OO0 ))	
        OOO0O0O0OO0OOOO00 .append (('rdiag',O00O000OOOO0O0OO0 ))	
    def OOO0O00000OO00OOO (O0O0O0O0OO00O0OOO ,OO0000O00OO00OOOO ):	
        OO00O00OO00000OOO ,OOO00OO000OO0OO00 =OO0000O00OO00OOOO 	
        if OO00O00OO00000OOO =='row':	
            return O0O0O0O0OO00O0OOO [0 ]==OOO00OO000OO0OO00 	
        if OO00O00OO00000OOO =='col':	
            return O0O0O0O0OO00O0OOO [1 ]==OOO00OO000OO0OO00 	
        if OO00O00OO00000OOO =='diag':	
            return (O0O0O0O0OO00O0OOO [0 ]+O0O0O0O0OO00O0OOO [1 ])==OOO00OO000OO0OO00 	
        else :	
            return (OO00OO0O000000000 -1 -O0O0O0O0OO00O0OOO [0 ]+O0O0O0O0OO00O0OOO [1 ])==OOO00OO000OO0OO00 	
    O0OOOOOO0O0O0OOO0 =O00OO0O0OO000OO00 (OOOO0O00O0OO0OOO0 ,OOO00O0OOOOOO00O0 ,OOO0O0O0OO0OOOO00 ,OOO0O00000OO00OOO )	
    O0OOOOOO0O0O0OOO0 .build_links ()	
    O0OOOOOO0O0O0OOO0 .algorithm_x ()	
    OO0OOOO0OOOO00OOO =O0OOOOOO0O0O0OOO0 .get_results ()	
    for OOO000O0O0OO00O00 in OO0OOOO0OOOO00OOO :	
        print ("+++++++++")	
        for O00O000OOOO0O0OO0 in range (OO00OO0O000000000 ):	
            OOO0O0O0OO000OO00 =""	
            for O000OOOO00O0O00OO in range (OO00OO0O000000000 ):	
                if (O00O000OOOO0O0OO0 ,O000OOOO00O0O00OO )in OOO000O0O0OO00O00 :	
                    OOO0O0O0OO000OO00 +="1"	
                else :	
                    OOO0O0O0OO000OO00 +="0"	
            print (OOO0O0O0OO000OO00 )	
        print ("+++++++++")	
    print ("%d results found for N-Queen"%len (OO0OOOO0OOOO00OOO ))	
def O0O0OOOO00OO0OO0O ():	
    OO00000OOO0OOO0OO (10 )	
if __name__ =="__main__":	
    O0O0OOOO00OO0OO0O ()	

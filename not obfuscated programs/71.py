import sys ;
from math import ceil ,log2 ;
INT_MAX =sys .maxsize ;
def minVal (OO0OOOOOO00O000OO ,OOO00OOOO000OOO0O ):
    return OO0OOOOOO00O000OO if (OO0OOOOOO00O000OO <OOO00OOOO000OOO0O )else OOO00OOOO000OOO0O ;
def getMid (O000OO0O0OO0OO00O ,O0000OOOOO00000OO ):
    return O000OO0O0OO0OO00O +(O0000OOOOO00000OO -O000OO0O0OO0OO00O )//2 ;
""" A recursive function to get the
minimum value in a given range
of array indexes. The following
are parameters for this function.
 
    st --> Pointer to segment tree
    index --> Index of current node in the
        segment tree. Initially 0 is
        passed as root is always at index 0
    ss & se --> Starting and ending indexes
                of the segment represented
                by current node, i.e., st[index]
    qs & qe --> Starting and ending indexes of query range """
def RMQUtil (OO000O00O000OOO0O ,OO000O0OO0O0OOO00 ,O0OO0OO0O0OOOOO0O ,OO00000OOOOO00OO0 ,O0OOOOOO0O0O0OO0O ,O0O0O0OO000OO00O0 ):
    if (OO00000OOOOO00OO0 <=OO000O0OO0O0OOO00 and O0OOOOOO0O0O0OO0O >=O0OO0OO0O0OOOOO0O ):
        return OO000O00O000OOO0O [O0O0O0OO000OO00O0 ];
    if (O0OO0OO0O0OOOOO0O <OO00000OOOOO00OO0 or OO000O0OO0O0OOO00 >O0OOOOOO0O0O0OO0O ):
        return INT_MAX ;
    O0000O00OO0O00000 =getMid (OO000O0OO0O0OOO00 ,O0OO0OO0O0OOOOO0O );
    return minVal (RMQUtil (OO000O00O000OOO0O ,OO000O0OO0O0OOO00 ,O0000O00OO0O00000 ,OO00000OOOOO00OO0 ,O0OOOOOO0O0O0OO0O ,2 *O0O0O0OO000OO00O0 +1 ),RMQUtil (OO000O00O000OOO0O ,O0000O00OO0O00000 +1 ,O0OO0OO0O0OOOOO0O ,OO00000OOOOO00OO0 ,O0OOOOOO0O0O0OO0O ,2 *O0O0O0OO000OO00O0 +2 ));
def RMQ (OOOO0O00O0OO0O00O ,O00000OOOO00O0O00 ,OO00OOO0OOOOOOO00 ,O0000000O00000OOO ):
    if (OO00OOO0OOOOOOO00 <0 or O0000000O00000OOO >O00000OOOO00O0O00 -1 or OO00OOO0OOOOOOO00 >O0000000O00000OOO ):
        print ("Invalid Input");
        return -1 ;
    return RMQUtil (OOOO0O00O0OO0O00O ,0 ,O00000OOOO00O0O00 -1 ,OO00OOO0OOOOOOO00 ,O0000000O00000OOO ,0 );
def constructSTUtil (O0OO000O0O0OO0O0O ,OO0OOO00O0O0OO0OO ,O0OOOOOOOO0OOO000 ,OOOO00000O0OO00OO ,O00000O00000OO0O0 ):
    if (OO0OOO00O0O0OO0OO ==O0OOOOOOOO0OOO000 ):
        OOOO00000O0OO00OO [O00000O00000OO0O0 ]=O0OO000O0O0OO0O0O [OO0OOO00O0O0OO0OO ];
        return O0OO000O0O0OO0O0O [OO0OOO00O0O0OO0OO ];
    OOO0O000OOOOO0000 =getMid (OO0OOO00O0O0OO0OO ,O0OOOOOOOO0OOO000 );
    OOOO00000O0OO00OO [O00000O00000OO0O0 ]=minVal (constructSTUtil (O0OO000O0O0OO0O0O ,OO0OOO00O0O0OO0OO ,OOO0O000OOOOO0000 ,OOOO00000O0OO00OO ,O00000O00000OO0O0 *2 +1 ),constructSTUtil (O0OO000O0O0OO0O0O ,OOO0O000OOOOO0000 +1 ,O0OOOOOOOO0OOO000 ,OOOO00000O0OO00OO ,O00000O00000OO0O0 *2 +2 ));
    return OOOO00000O0OO00OO [O00000O00000OO0O0 ];
"""Function to construct segment tree
from given array. This function allocates
memory for segment tree and calls constructSTUtil()
to fill the allocated memory """
def constructST (OOO0OO00OO0O0O0OO ,O0O000O00OO00O0OO ):
    OO0OO0O0000O0000O =(int )(ceil (log2 (O0O000O00OO00O0OO )));
    OO0000OOOOOO000O0 =2 *(int )(2 **OO0OO0O0000O0000O )-1 ;
    OOOO00000OO0000O0 =[0 ]*(OO0000OOOOOO000O0 );
    constructSTUtil (OOO0OO00OO0O0O0OO ,0 ,O0O000O00OO00O0OO -1 ,OOOO00000OO0000O0 ,0 );
    return OOOO00000OO0000O0 ;
if __name__ =="__main__":
    arr =[1 ,3 ,2 ,7 ,9 ,11 ];
    n =len (arr );
    st =constructST (arr ,n );
    qs =1 ;
    qe =5 ;
    print ("Minimum of values in range [",qs ,",",qe ,"]","is =",RMQ (st ,n ,qs ,qe ));
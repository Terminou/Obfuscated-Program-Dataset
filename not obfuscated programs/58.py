K =[0x428a2f98 ,0x71374491 ,0xb5c0fbcf ,0xe9b5dba5 ,0x3956c25b ,0x59f111f1 ,0x923f82a4 ,0xab1c5ed5 ,0xd807aa98 ,0x12835b01 ,0x243185be ,0x550c7dc3 ,0x72be5d74 ,0x80deb1fe ,0x9bdc06a7 ,0xc19bf174 ,0xe49b69c1 ,0xefbe4786 ,0x0fc19dc6 ,0x240ca1cc ,0x2de92c6f ,0x4a7484aa ,0x5cb0a9dc ,0x76f988da ,0x983e5152 ,0xa831c66d ,0xb00327c8 ,0xbf597fc7 ,0xc6e00bf3 ,0xd5a79147 ,0x06ca6351 ,0x14292967 ,0x27b70a85 ,0x2e1b2138 ,0x4d2c6dfc ,0x53380d13 ,0x650a7354 ,0x766a0abb ,0x81c2c92e ,0x92722c85 ,0xa2bfe8a1 ,0xa81a664b ,0xc24b8b70 ,0xc76c51a3 ,0xd192e819 ,0xd6990624 ,0xf40e3585 ,0x106aa070 ,0x19a4c116 ,0x1e376c08 ,0x2748774c ,0x34b0bcb5 ,0x391c0cb3 ,0x4ed8aa4a ,0x5b9cca4f ,0x682e6ff3 ,0x748f82ee ,0x78a5636f ,0x84c87814 ,0x8cc70208 ,0x90befffa ,0xa4506ceb ,0xbef9a3f7 ,0xc67178f2 ]	
def generate_hash (O00O0OOOOO0OO0OOO :bytearray )->bytearray :	
    ""	
    if isinstance (O00O0OOOOO0OO0OOO ,str ):	
        O00O0OOOOO0OO0OOO =bytearray (O00O0OOOOO0OO0OOO ,'ascii')	
    elif isinstance (O00O0OOOOO0OO0OOO ,bytes ):	
        O00O0OOOOO0OO0OOO =bytearray (O00O0OOOOO0OO0OOO )	
    elif not isinstance (O00O0OOOOO0OO0OOO ,bytearray ):	
        raise TypeError 	
    O000O000OOO0OOOOO =len (O00O0OOOOO0OO0OOO )*8 	
    O00O0OOOOO0OO0OOO .append (0x80 )	
    while (len (O00O0OOOOO0OO0OOO )*8 +64 )%512 !=0 :	
        O00O0OOOOO0OO0OOO .append (0x00 )	
    O00O0OOOOO0OO0OOO +=O000O000OOO0OOOOO .to_bytes (8 ,'big')	
    assert (len (O00O0OOOOO0OO0OOO )*8 )%512 ==0 ,"Padding did not complete properly!"	
    O0O00O0OOO00OOOOO =[]	
    for O0O00O0O0O00000OO in range (0 ,len (O00O0OOOOO0OO0OOO ),64 ):	
        O0O00O0OOO00OOOOO .append (O00O0OOOOO0OO0OOO [O0O00O0O0O00000OO :O0O00O0O0O00000OO +64 ])	
    O000OOO000000O00O =0x6a09e667 	
    O0O0OOOOO00OO000O =0xbb67ae85 	
    O00OOO0OO0O00O0O0 =0x3c6ef372 	
    O0O0000OO0OO0O000 =0xa54ff53a 	
    OO000O0OO00O0OOO0 =0x9b05688c 	
    OOO00O0OO00O0OOO0 =0x510e527f 	
    OOOO0OOO000OO0O0O =0x1f83d9ab 	
    OO0O00000OOOOOO00 =0x5be0cd19 	
    for O00O0O0OOOO0O000O in O0O00O0OOO00OOOOO :	
        O0OOO0O0O0O000000 =[]	
        for OOOO00000OOO0000O in range (0 ,64 ):	
            if OOOO00000OOO0000O <=15 :	
                O0OOO0O0O0O000000 .append (bytes (O00O0O0OOOO0O000O [OOOO00000OOO0000O *4 :(OOOO00000OOO0000O *4 )+4 ]))	
            else :	
                OO000OOO000OO00O0 =_O00OO00OO00000OO0 (int .from_bytes (O0OOO0O0O0O000000 [OOOO00000OOO0000O -2 ],'big'))	
                O0O0OO0OO00OO0O00 =int .from_bytes (O0OOO0O0O0O000000 [OOOO00000OOO0000O -7 ],'big')	
                O00OO0O0OOO00000O =_OO0O0OO0O0O0OOOOO (int .from_bytes (O0OOO0O0O0O000000 [OOOO00000OOO0000O -15 ],'big'))	
                OOOO0O0O0O00O0000 =int .from_bytes (O0OOO0O0O0O000000 [OOOO00000OOO0000O -16 ],'big')	
                O0OO0OO0O00OO00OO =((OO000OOO000OO00O0 +O0O0OO0OO00OO0O00 +O00OO0O0OOO00000O +OOOO0O0O0O00O0000 )%2 **32 ).to_bytes (4 ,'big')	
                O0OOO0O0O0O000000 .append (O0OO0OO0O00OO00OO )	
        assert len (O0OOO0O0O0O000000 )==64 	
        O00O0OO00OOO00O0O =O000OOO000000O00O 	
        OOO00O0OOOOOOOO00 =O0O0OOOOO00OO000O 	
        OOOOO00OOO000000O =O00OOO0OO0O00O0O0 	
        OO0OO000OO0OOOOOO =O0O0000OO0OO0O000 	
        O0OOO00O0000OO0O0 =OOO00O0OO00O0OOO0 	
        O000OO000O0OOOO00 =OO000O0OO00O0OOO0 	
        OO000O00O0O0O0O0O =OOOO0OOO000OO0O0O 	
        OO0O00OOOO00O000O =OO0O00000OOOOOO00 	
        for OOOO00000OOO0000O in range (64 ):	
            OO00O0OO000O0OO00 =((OO0O00OOOO00O000O +_O0O0O00OOO0OOO0OO (O0OOO00O0000OO0O0 )+_OOO00O0OO0OOO00O0 (O0OOO00O0000OO0O0 ,O000OO000O0OOOO00 ,OO000O00O0O0O0O0O )+K [OOOO00000OOO0000O ]+int .from_bytes (O0OOO0O0O0O000000 [OOOO00000OOO0000O ],'big'))%2 **32 )	
            O0O000O0OOO0OOO0O =(_OOOO0O00O0O00O0O0 (O00O0OO00OOO00O0O )+_O00OO0OOO0O0O0000 (O00O0OO00OOO00O0O ,OOO00O0OOOOOOOO00 ,OOOOO00OOO000000O ))%2 **32 	
            OO0O00OOOO00O000O =OO000O00O0O0O0O0O 	
            OO000O00O0O0O0O0O =O000OO000O0OOOO00 	
            O000OO000O0OOOO00 =O0OOO00O0000OO0O0 	
            O0OOO00O0000OO0O0 =(OO0OO000OO0OOOOOO +OO00O0OO000O0OO00 )%2 **32 	
            OO0OO000OO0OOOOOO =OOOOO00OOO000000O 	
            OOOOO00OOO000000O =OOO00O0OOOOOOOO00 	
            OOO00O0OOOOOOOO00 =O00O0OO00OOO00O0O 	
            O00O0OO00OOO00O0O =(OO00O0OO000O0OO00 +O0O000O0OOO0OOO0O )%2 **32 	
        O000OOO000000O00O =(O000OOO000000O00O +O00O0OO00OOO00O0O )%2 **32 	
        O0O0OOOOO00OO000O =(O0O0OOOOO00OO000O +OOO00O0OOOOOOOO00 )%2 **32 	
        O00OOO0OO0O00O0O0 =(O00OOO0OO0O00O0O0 +OOOOO00OOO000000O )%2 **32 	
        O0O0000OO0OO0O000 =(O0O0000OO0OO0O000 +OO0OO000OO0OOOOOO )%2 **32 	
        OOO00O0OO00O0OOO0 =(OOO00O0OO00O0OOO0 +O0OOO00O0000OO0O0 )%2 **32 	
        OO000O0OO00O0OOO0 =(OO000O0OO00O0OOO0 +O000OO000O0OOOO00 )%2 **32 	
        OOOO0OOO000OO0O0O =(OOOO0OOO000OO0O0O +OO000O00O0O0O0O0O )%2 **32 	
        OO0O00000OOOOOO00 =(OO0O00000OOOOOO00 +OO0O00OOOO00O000O )%2 **32 	
    return ((O000OOO000000O00O ).to_bytes (4 ,'big')+(O0O0OOOOO00OO000O ).to_bytes (4 ,'big')+(O00OOO0OO0O00O0O0 ).to_bytes (4 ,'big')+(O0O0000OO0OO0O000 ).to_bytes (4 ,'big')+(OOO00O0OO00O0OOO0 ).to_bytes (4 ,'big')+(OO000O0OO00O0OOO0 ).to_bytes (4 ,'big')+(OOOO0OOO000OO0O0O ).to_bytes (4 ,'big')+(OO0O00000OOOOOO00 ).to_bytes (4 ,'big'))	
def _OO0O0OO0O0O0OOOOO (OOOOO0O000OOOO0OO :int ):	
    ""	
    OOOOO0O000OOOO0OO =(_O0O00O00O00O00000 (OOOOO0O000OOOO0OO ,7 )^_O0O00O00O00O00000 (OOOOO0O000OOOO0OO ,18 )^(OOOOO0O000OOOO0OO >>3 ))	
    return OOOOO0O000OOOO0OO 	
def _O00OO00OO00000OO0 (OOOO00O0O0OO0O00O :int ):	
    ""	
    OOOO00O0O0OO0O00O =(_O0O00O00O00O00000 (OOOO00O0O0OO0O00O ,17 )^_O0O00O00O00O00000 (OOOO00O0O0OO0O00O ,19 )^(OOOO00O0O0OO0O00O >>10 ))	
    return OOOO00O0O0OO0O00O 	
def _OOOO0O00O0O00O0O0 (O00OOO0O0000O0O00 :int ):	
    ""	
    O00OOO0O0000O0O00 =(_O0O00O00O00O00000 (O00OOO0O0000O0O00 ,2 )^_O0O00O00O00O00000 (O00OOO0O0000O0O00 ,13 )^_O0O00O00O00O00000 (O00OOO0O0000O0O00 ,22 ))	
    return O00OOO0O0000O0O00 	
def _O0O0O00OOO0OOO0OO (OO0000OO0OOO00O0O :int ):	
    ""	
    OO0000OO0OOO00O0O =(_O0O00O00O00O00000 (OO0000OO0OOO00O0O ,6 )^_O0O00O00O00O00000 (OO0000OO0OOO00O0O ,11 )^_O0O00O00O00O00000 (OO0000OO0OOO00O0O ,25 ))	
    return OO0000OO0OOO00O0O 	
def _OOO00O0OO0OOO00O0 (OOOO0O0O0OOOO00OO :int ,O0000OOOOOO00O00O :int ,O0O00OOOO00OOO00O :int ):	
    ""	
    return (OOOO0O0O0OOOO00OO &O0000OOOOOO00O00O )^(~OOOO0O0O0OOOO00OO &O0O00OOOO00OOO00O )	
def _O00OO0OOO0O0O0000 (O00O0O000OO0O0O0O :int ,O000OOOOOOO0OOO0O :int ,O0O0O000O0O000OOO :int ):	
    ""	
    return (O00O0O000OO0O0O0O &O000OOOOOOO0OOO0O )^(O00O0O000OO0O0O0O &O0O0O000O0O000OOO )^(O000OOOOOOO0OOO0O &O0O0O000O0O000OOO )	
def _O0O00O00O00O00000 (O0OOO0OO00O00OO00 :int ,O0000OO00000OOOOO :int ,size :int =32 ):	
    ""	
    return (O0OOO0OO00O00OO00 >>O0000OO00000OOOOO )|(O0OOO0OO00O00OO00 <<size -O0000OO00000OOOOO )	
if __name__ =="__main__":	
    print (generate_hash ("Hello").hex ())
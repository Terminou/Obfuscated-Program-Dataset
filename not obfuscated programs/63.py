def count_paths (O0O0O00OO00000O0O ,OO0OOO0O000OO0000 ,O0OOOOOO00OO00O00 ):	
    ""	
    O000OO00O000OO0OO =[[-1 ]*(O0O0O00OO00000O0O +1 )for _OO0O00O0OO0O0OOOO in range (OO0OOO0O000OO0000 +1 )]	
    return count_paths_helper (O0O0O00OO00000O0O ,OO0OOO0O000OO0000 ,O0OOOOOO00OO00O00 ,O000OO00O000OO0OO ,OO0OOO0O000OO0000 ,O0O0O00OO00000O0O )	
def count_paths_helper (OOO0OOOOOOO00O0OO ,O00O0O0O0000OO0O0 ,OO000OOOOOO00OOO0 ,OO000O0OOO0O0OO0O ,O0O0OOO0O0O00OOOO ,OOO000000000OO000 ):	
    ""	
    if OO000O0OOO0O0OO0O [O0O0OOO0O0O00OOOO ][OOO000000000OO000 ]>=0 :	
        return OO000O0OOO0O0OO0O [O0O0OOO0O0O00OOOO ][OOO000000000OO000 ]	
    if (O0O0OOO0O0O00OOOO ,OOO000000000OO000 )in OO000OOOOOO00OOO0 :	
        OOOO00O0O0OOOOO00 =0 	
    elif O0O0OOO0O0O00OOOO ==0 and OOO000000000OO000 ==0 :	
        OOOO00O0O0OOOOO00 =1 	
    elif O0O0OOO0O0O00OOOO ==0 :	
        OOOO00O0O0OOOOO00 =count_paths_helper (OOO0OOOOOOO00O0OO ,O00O0O0O0000OO0O0 ,OO000OOOOOO00OOO0 ,OO000O0OOO0O0OO0O ,O0O0OOO0O0O00OOOO ,OOO000000000OO000 -1 )	
    elif OOO000000000OO000 ==0 :	
        OOOO00O0O0OOOOO00 =count_paths_helper (OOO0OOOOOOO00O0OO ,O00O0O0O0000OO0O0 ,OO000OOOOOO00OOO0 ,OO000O0OOO0O0OO0O ,O0O0OOO0O0O00OOOO -1 ,OOO000000000OO000 )	
    else :	
        OOOO00O0O0OOOOO00 =count_paths_helper (OOO0OOOOOOO00O0OO ,O00O0O0O0000OO0O0 ,OO000OOOOOO00OOO0 ,OO000O0OOO0O0OO0O ,O0O0OOO0O0O00OOOO -1 ,OOO000000000OO000 )+count_paths_helper (OOO0OOOOOOO00O0OO ,O00O0O0O0000OO0O0 ,OO000OOOOOO00OOO0 ,OO000O0OOO0O0OO0O ,O0O0OOO0O0O00OOOO ,OOO000000000OO000 -1 )	
    OO000O0OOO0O0OO0O [O0O0OOO0O0O00OOOO ][OOO000000000OO000 ]=OOOO00O0O0OOOOO00 	
    return OOOO00O0O0OOOOO00 	
m ,n =input ('Enter m, n for the size of the m x n grid (m rows and n columns): ').split (',')	
m =int (m )	
n =int (n )	
print ('Enter the coordinates of holes on each line (empty line to stop): ')	
holes =[]	
while True :	
    hole =input ('')	
    if not hole .strip ():	
        break 	
    hole =hole .split (',')	
    hole =(int (hole [0 ]),int (hole [1 ]))	
    holes .append (hole )	
count =count_paths (m ,n ,holes )	
print ('Number of paths from (0, 0) to ({}, {}): {}.'.format (n ,m ,count ))